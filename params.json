{
  "name": "cBrainfuck",
  "tagline": "A brainfuck interpreter made in C.",
  "body": "####What\r\nThis is the project I chose to do just as a way to learn how to use git and github.\r\n\r\nIt's a brainfuck interpreter running on C using the concept of linked list - a abstract data type.\r\n\r\nYou can fork and pull request. You welcome!\r\n\r\n####Contact me\r\n\r\n    Vitor Rodrigues (tkovs)\r\n    victor.rdg@hotmail.com\r\n\r\n####Contributing\r\n\r\nAs I do not have much experience with advanced C language, the code is easy to read and understand. So **anyone** can contribute, needs to know just how brainfuck works and the reasoning used to implement the interpreter.\r\n\r\n```\r\n1. Fork it.\r\n2. Clone to your workstation.\r\n3. Create a branch (`git checkout -b my_contribution`)\r\n4. Commit your changes (`git commit -am \"Added performance tester\"`)\r\n5. Push to the branch (`git push origin my_contribution`)\r\n6. Open a Pull Request\r\n7. Enjoy a refreshing Dollynho and wait.\r\n```\r\n\r\n####How to use\r\n\r\nNeed only the source and include folders in your project folder.\r\nAdd your program in your project folder.\r\nIn your code, reference the *include/cbrainfuck.h* file.\r\nCreate a text file with the brainfuck code.\r\nCreate a text file with content to be read when a comma is found in brainfuck code (or use */dev/stdin* in linux).\r\n\r\nIn your C code to call the interpreter function. The interpreter function returns a string with the result of the interpretation of brainfuck code. The interpreter function takes two parameters: the first is the address of the text file and the second the address of the input file (or */dev/stdin*).\r\n\r\nA example:\r\n\r\n```cpp\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n#include \"include/cbrainfuck.h\"\r\n\r\n// argv[1] should be the cbrainfuck code file\r\n// argv[2] should be the input file\r\nint main(int argc, char **argv) {\r\n    char *s;\r\n    s = interpreter(argv[1], (argc > 2 ? argv[2] : \"/dev/stdin\"));\r\n\r\n    if (_ERRORS_) {\r\n        fprintf(stderr, \"%s\\n\", _MESSAGE_);\r\n        return 1;\r\n    } else {\r\n        printf (\"%s\", s);\r\n        free(s);\r\n    }\r\n\r\n    return 0;\r\n}\r\n```",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}